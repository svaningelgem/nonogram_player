import numpy as np

from src.grid import Grid


def test_simple_grid():
    grid = Grid(
        left={0: [3], 1: [2, 2], 2: [1, 4], 3: [1, 5], 4: [2, 2, 1, 1], 5: [5, 1], 6: [5, 1], 7: [2, 1], 8: [1, 2], 9: [6]},
        top={0: [3, 1], 1: [3, 1], 2: [3, 1], 3: [9], 4: [2, 3, 1], 5: [1, 2, 2], 6: [9], 7: [3], 8: [2], 9: [2]},
    )

    grid.solve()
    assert np.all(grid.inner == [
        [-1, -1, -1, -1,  1,  1,  1, -1, -1, -1],
        [-1, -1, -1,  1,  1, -1,  1,  1, -1, -1],
        [-1, -1, -1,  1, -1,  1,  1,  1,  1, -1],
        [-1, -1, -1,  1, -1,  1,  1,  1,  1,  1],
        [ 1,  1, -1,  1,  1, -1,  1, -1, -1,  1],
        [ 1,  1,  1,  1,  1, -1,  1, -1, -1, -1],
        [ 1,  1,  1,  1,  1, -1,  1, -1, -1, -1],
        [-1, -1,  1,  1, -1, -1,  1, -1, -1, -1],
        [-1, -1, -1,  1, -1,  1,  1, -1, -1, -1],
        [ 1,  1,  1,  1,  1,  1, -1, -1, -1, -1],
    ])


def test_15x15_grid():
    grid = Grid(
        left={0: [4, 1], 1: [6, 3], 2: [1, 1, 5], 3: [1, 3, 3], 4: [7, 3], 5: [3, 3, 2], 6: [3, 5], 7: [10], 8: [12], 9: [10], 10: [5, 4], 11: [4, 1, 1], 12: [6, 1, 4], 13: [6, 6], 14: [5]},
        top={0: [3], 1: [1, 3], 2: [1, 8], 3: [15], 4: [2, 11], 5: [2, 10], 6: [5, 4], 7: [1, 7], 8: [8], 9: [10], 10: [1, 5, 1], 11: [13], 12: [6, 1, 2], 13: [4, 2], 14: [1, 2]}
    )

    grid.solve()
    assert np.all(grid.inner == [
        [-1, -1, -1,  1,  1,  1,  1, -1, -1, -1, -1, -1,  1, -1, -1],
        [-1, -1,  1,  1,  1,  1,  1,  1, -1, -1, -1,  1,  1,  1, -1],
        [-1, -1, -1,  1, -1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1],
        [-1, -1, -1,  1, -1, -1,  1,  1,  1, -1, -1,  1,  1,  1, -1],
        [-1, -1, -1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1],
        [-1, -1, -1,  1,  1,  1, -1,  1,  1,  1, -1,  1,  1, -1, -1],
        [-1, -1, -1,  1,  1,  1, -1,  1,  1,  1,  1,  1, -1, -1, -1],
        [-1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1],
        [-1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1],
        [-1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1],
        [-1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1, -1, -1, -1],
        [-1, -1,  1,  1,  1,  1, -1, -1, -1,  1, -1,  1, -1, -1, -1],
        [ 1,  1,  1,  1,  1,  1, -1, -1, -1,  1, -1,  1,  1,  1,  1],
        [ 1,  1,  1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1,  1,  1],
        [ 1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    ])
